diff --git a/dist/cjs/auth/ClientCredentialsStrategy.js b/dist/cjs/auth/ClientCredentialsStrategy.js
index 9d02ee5ffa64673ba96ee34e941da76a2c110a13..f16f54344f018d2a2c78f7c7e6fe79a9df601faf 100644
--- a/dist/cjs/auth/ClientCredentialsStrategy.js
+++ b/dist/cjs/auth/ClientCredentialsStrategy.js
@@ -1,66 +1,79 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod };
+  };
 Object.defineProperty(exports, "__esModule", { value: true });
-const AccessTokenHelpers_js_1 = __importDefault(require("./AccessTokenHelpers.js"));
+const AccessTokenHelpers_js_1 = __importDefault(
+  require("./AccessTokenHelpers.js")
+);
 class ClientCredentialsStrategy {
-    clientId;
-    clientSecret;
-    scopes;
-    static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
-    configuration = null;
-    get cache() { return this.configuration.cachingStrategy; }
-    constructor(clientId, clientSecret, scopes = []) {
-        this.clientId = clientId;
-        this.clientSecret = clientSecret;
-        this.scopes = scopes;
-    }
-    setConfiguration(configuration) {
-        this.configuration = configuration;
-    }
-    async getOrCreateAccessToken() {
-        const token = await this.cache.getOrCreate(ClientCredentialsStrategy.cacheKey, async () => {
-            const token = await this.getTokenFromApi();
-            return AccessTokenHelpers_js_1.default.toCachable(token);
-        }, async (_) => {
-            const refreshed = await this.getTokenFromApi();
-            return AccessTokenHelpers_js_1.default.toCachable(refreshed);
-        });
-        return token;
-    }
-    async getAccessToken() {
-        const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
-        return token;
-    }
-    removeAccessToken() {
-        this.cache.remove(ClientCredentialsStrategy.cacheKey);
-    }
-    async getTokenFromApi() {
-        const options = {
-            grant_type: 'client_credentials',
-            scope: this.scopes.join(' ')
-        };
-        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');
-        const hasBuffer = typeof Buffer !== 'undefined';
-        const credentials = `${this.clientId}:${this.clientSecret}`;
-        const basicAuth = hasBuffer
-            ? Buffer.from(credentials).toString('base64')
-            : btoa(credentials);
-        const result = await fetch("https://accounts.spotify.com/api/token", {
-            method: 'POST',
-            headers: {
-                "Content-Type": "application/x-www-form-urlencoded",
-                "Authorization": `Basic ${basicAuth}`
-            },
-            body: bodyAsString
-        });
-        if (result.status !== 200) {
-            throw new Error("Failed to get access token.");
-        }
-        const json = await result.json();
-        return json;
+  clientId;
+  clientSecret;
+  scopes;
+  static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
+  configuration = null;
+  get cache() {
+    return this.configuration.cachingStrategy;
+  }
+  constructor(clientId, clientSecret, scopes = []) {
+    this.clientId = clientId;
+    this.clientSecret = clientSecret;
+    this.scopes = scopes;
+  }
+  setConfiguration(configuration) {
+    this.configuration = configuration;
+  }
+  async getOrCreateAccessToken() {
+    const token = await this.cache.getOrCreate(
+      ClientCredentialsStrategy.cacheKey,
+      async () => {
+        const token = await this.getTokenFromApi();
+        return AccessTokenHelpers_js_1.default.toCachable(token);
+      },
+      async (_) => {
+        const refreshed = await this.getTokenFromApi();
+        return AccessTokenHelpers_js_1.default.toCachable(refreshed);
+      }
+    );
+    return token;
+  }
+  async getAccessToken() {
+    const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
+    return token;
+  }
+  removeAccessToken() {
+    this.cache.remove(ClientCredentialsStrategy.cacheKey);
+  }
+  async getTokenFromApi() {
+    const options = {
+      grant_type: "client_credentials",
+      scope: this.scopes.join(" "),
+    };
+    const bodyAsString = Object.keys(options)
+      .map((key) => key + "=" + options[key])
+      .join("&");
+    const hasBuffer = typeof Buffer !== "undefined";
+    const credentials = `${this.clientId}:${this.clientSecret}`;
+    const basicAuth = hasBuffer
+      ? Buffer.from(credentials).toString("base64")
+      : btoa(credentials);
+    const result = await fetch("https://accounts.spotify.com/api/token", {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Authorization: `Basic ${basicAuth}`,
+      },
+      body: bodyAsString,
+      cache: "no-store",
+    });
+    if (result.status !== 200) {
+      throw new Error("Failed to get access token.");
     }
+    const json = await result.json();
+    return json;
+  }
 }
 exports.default = ClientCredentialsStrategy;
 //# sourceMappingURL=ClientCredentialsStrategy.js.map
\ No newline at end of file
diff --git a/dist/cjs/index.d.ts b/dist/cjs/index.d.ts
index fbf77964cdd33a0bac5c37ad35e2b1af18d95cd4..310b2f9489b9ee824c13a31a8c8bf8756489f486 100644
--- a/dist/cjs/index.d.ts
+++ b/dist/cjs/index.d.ts
@@ -1,18 +1,33 @@
+import { Scopes } from "./Scopes.js";
 import { SpotifyApi } from "./SpotifyApi.js";
 import AuthorizationCodeWithPKCEStrategy from "./auth/AuthorizationCodeWithPKCEStrategy.js";
 import ClientCredentialsStrategy from "./auth/ClientCredentialsStrategy.js";
-import IAuthStrategy from "./auth/IAuthStrategy.js";
+import IAuthStrategy, { emptyAccessToken } from "./auth/IAuthStrategy.js";
+import ProvidedAccessTokenStrategy from "./auth/ProvidedAccessTokenStrategy.js";
+import GenericCache from "./caching/GenericCache.js";
+import { ICacheStore } from "./caching/ICacheStore.js";
 import InMemoryCachingStrategy from "./caching/InMemoryCachingStrategy.js";
 import LocalStorageCachingStrategy from "./caching/LocalStorageCachingStrategy.js";
-import { ICacheStore } from "./caching/ICacheStore.js";
-import GenericCache from "./caching/GenericCache.js";
 import ConsoleLoggingErrorHandler from "./errorhandling/ConsoleLoggingErrorHandler.js";
 import NoOpErrorHandler from "./errorhandling/NoOpErrorHandler.js";
 import DocumentLocationRedirectionStrategy from "./redirection/DocumentLocationRedirectionStrategy.js";
 import DefaultResponseValidator from "./responsevalidation/DefaultResponseValidator.js";
 import DefaultResponseDeserializer from "./serialization/DefaultResponseDeserializer.js";
-import { Scopes } from "./Scopes.js";
-import { emptyAccessToken } from "./auth/IAuthStrategy.js";
-export { SpotifyApi, AuthorizationCodeWithPKCEStrategy, ClientCredentialsStrategy, InMemoryCachingStrategy, LocalStorageCachingStrategy, GenericCache, ConsoleLoggingErrorHandler, NoOpErrorHandler, DocumentLocationRedirectionStrategy, DefaultResponseValidator, DefaultResponseDeserializer, Scopes, emptyAccessToken };
 export type * from "./types.js";
-export type { IAuthStrategy, ICacheStore, };
+export {
+  AuthorizationCodeWithPKCEStrategy,
+  ClientCredentialsStrategy,
+  ConsoleLoggingErrorHandler,
+  DefaultResponseDeserializer,
+  DefaultResponseValidator,
+  DocumentLocationRedirectionStrategy,
+  GenericCache,
+  InMemoryCachingStrategy,
+  LocalStorageCachingStrategy,
+  NoOpErrorHandler,
+  ProvidedAccessTokenStrategy,
+  Scopes,
+  SpotifyApi,
+  emptyAccessToken,
+};
+export type { IAuthStrategy, ICacheStore };
diff --git a/dist/cjs/index.js b/dist/cjs/index.js
index 8a61bc1e3b1d350548a56297763db57b348cf036..5b5ba9ff3aa633c733b04c72d36c6c670e34456f 100644
--- a/dist/cjs/index.js
+++ b/dist/cjs/index.js
@@ -1,33 +1,87 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod };
+  };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.emptyAccessToken = exports.Scopes = exports.DefaultResponseDeserializer = exports.DefaultResponseValidator = exports.DocumentLocationRedirectionStrategy = exports.NoOpErrorHandler = exports.ConsoleLoggingErrorHandler = exports.GenericCache = exports.LocalStorageCachingStrategy = exports.InMemoryCachingStrategy = exports.ClientCredentialsStrategy = exports.AuthorizationCodeWithPKCEStrategy = exports.SpotifyApi = void 0;
+exports.emptyAccessToken =
+  exports.Scopes =
+  exports.DefaultResponseDeserializer =
+  exports.DefaultResponseValidator =
+  exports.DocumentLocationRedirectionStrategy =
+  exports.NoOpErrorHandler =
+  exports.ConsoleLoggingErrorHandler =
+  exports.GenericCache =
+  exports.LocalStorageCachingStrategy =
+  exports.InMemoryCachingStrategy =
+  exports.ClientCredentialsStrategy =
+  exports.AuthorizationCodeWithPKCEStrategy =
+  exports.SpotifyApi =
+    void 0;
 const SpotifyApi_js_1 = require("./SpotifyApi.js");
-Object.defineProperty(exports, "SpotifyApi", { enumerable: true, get: function () { return SpotifyApi_js_1.SpotifyApi; } });
-const AuthorizationCodeWithPKCEStrategy_js_1 = __importDefault(require("./auth/AuthorizationCodeWithPKCEStrategy.js"));
-exports.AuthorizationCodeWithPKCEStrategy = AuthorizationCodeWithPKCEStrategy_js_1.default;
-const ClientCredentialsStrategy_js_1 = __importDefault(require("./auth/ClientCredentialsStrategy.js"));
+Object.defineProperty(exports, "SpotifyApi", {
+  enumerable: true,
+  get: function () {
+    return SpotifyApi_js_1.SpotifyApi;
+  },
+});
+const AuthorizationCodeWithPKCEStrategy_js_1 = __importDefault(
+  require("./auth/AuthorizationCodeWithPKCEStrategy.js")
+);
+exports.AuthorizationCodeWithPKCEStrategy =
+  AuthorizationCodeWithPKCEStrategy_js_1.default;
+const ProvidedAccessTokenStrategy_js_1 = __importDefault(
+  require("./auth/ProvidedAccessTokenStrategy.js")
+);
+exports.ProvidedAccessTokenStrategy = ProvidedAccessTokenStrategy_js_1.default;
+const ClientCredentialsStrategy_js_1 = __importDefault(
+  require("./auth/ClientCredentialsStrategy.js")
+);
 exports.ClientCredentialsStrategy = ClientCredentialsStrategy_js_1.default;
-const InMemoryCachingStrategy_js_1 = __importDefault(require("./caching/InMemoryCachingStrategy.js"));
+const InMemoryCachingStrategy_js_1 = __importDefault(
+  require("./caching/InMemoryCachingStrategy.js")
+);
 exports.InMemoryCachingStrategy = InMemoryCachingStrategy_js_1.default;
-const LocalStorageCachingStrategy_js_1 = __importDefault(require("./caching/LocalStorageCachingStrategy.js"));
+const LocalStorageCachingStrategy_js_1 = __importDefault(
+  require("./caching/LocalStorageCachingStrategy.js")
+);
 exports.LocalStorageCachingStrategy = LocalStorageCachingStrategy_js_1.default;
 const GenericCache_js_1 = __importDefault(require("./caching/GenericCache.js"));
 exports.GenericCache = GenericCache_js_1.default;
-const ConsoleLoggingErrorHandler_js_1 = __importDefault(require("./errorhandling/ConsoleLoggingErrorHandler.js"));
+const ConsoleLoggingErrorHandler_js_1 = __importDefault(
+  require("./errorhandling/ConsoleLoggingErrorHandler.js")
+);
 exports.ConsoleLoggingErrorHandler = ConsoleLoggingErrorHandler_js_1.default;
-const NoOpErrorHandler_js_1 = __importDefault(require("./errorhandling/NoOpErrorHandler.js"));
+const NoOpErrorHandler_js_1 = __importDefault(
+  require("./errorhandling/NoOpErrorHandler.js")
+);
 exports.NoOpErrorHandler = NoOpErrorHandler_js_1.default;
-const DocumentLocationRedirectionStrategy_js_1 = __importDefault(require("./redirection/DocumentLocationRedirectionStrategy.js"));
-exports.DocumentLocationRedirectionStrategy = DocumentLocationRedirectionStrategy_js_1.default;
-const DefaultResponseValidator_js_1 = __importDefault(require("./responsevalidation/DefaultResponseValidator.js"));
+const DocumentLocationRedirectionStrategy_js_1 = __importDefault(
+  require("./redirection/DocumentLocationRedirectionStrategy.js")
+);
+exports.DocumentLocationRedirectionStrategy =
+  DocumentLocationRedirectionStrategy_js_1.default;
+const DefaultResponseValidator_js_1 = __importDefault(
+  require("./responsevalidation/DefaultResponseValidator.js")
+);
 exports.DefaultResponseValidator = DefaultResponseValidator_js_1.default;
-const DefaultResponseDeserializer_js_1 = __importDefault(require("./serialization/DefaultResponseDeserializer.js"));
+const DefaultResponseDeserializer_js_1 = __importDefault(
+  require("./serialization/DefaultResponseDeserializer.js")
+);
 exports.DefaultResponseDeserializer = DefaultResponseDeserializer_js_1.default;
 const Scopes_js_1 = require("./Scopes.js");
-Object.defineProperty(exports, "Scopes", { enumerable: true, get: function () { return Scopes_js_1.Scopes; } });
+Object.defineProperty(exports, "Scopes", {
+  enumerable: true,
+  get: function () {
+    return Scopes_js_1.Scopes;
+  },
+});
 const IAuthStrategy_js_1 = require("./auth/IAuthStrategy.js");
-Object.defineProperty(exports, "emptyAccessToken", { enumerable: true, get: function () { return IAuthStrategy_js_1.emptyAccessToken; } });
+Object.defineProperty(exports, "emptyAccessToken", {
+  enumerable: true,
+  get: function () {
+    return IAuthStrategy_js_1.emptyAccessToken;
+  },
+});
 //# sourceMappingURL=index.js.map
diff --git a/dist/mjs/auth/ClientCredentialsStrategy.js b/dist/mjs/auth/ClientCredentialsStrategy.js
index 26627dd2cd3081f26bbf078259956453dca3233e..8b6d629680ddecdb22ed783008c1600b0b332c54 100644
--- a/dist/mjs/auth/ClientCredentialsStrategy.js
+++ b/dist/mjs/auth/ClientCredentialsStrategy.js
@@ -1,60 +1,69 @@
 import AccessTokenHelpers from "./AccessTokenHelpers.js";
 export default class ClientCredentialsStrategy {
-    clientId;
-    clientSecret;
-    scopes;
-    static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
-    configuration = null;
-    get cache() { return this.configuration.cachingStrategy; }
-    constructor(clientId, clientSecret, scopes = []) {
-        this.clientId = clientId;
-        this.clientSecret = clientSecret;
-        this.scopes = scopes;
-    }
-    setConfiguration(configuration) {
-        this.configuration = configuration;
-    }
-    async getOrCreateAccessToken() {
-        const token = await this.cache.getOrCreate(ClientCredentialsStrategy.cacheKey, async () => {
-            const token = await this.getTokenFromApi();
-            return AccessTokenHelpers.toCachable(token);
-        }, async (_) => {
-            const refreshed = await this.getTokenFromApi();
-            return AccessTokenHelpers.toCachable(refreshed);
-        });
-        return token;
-    }
-    async getAccessToken() {
-        const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
-        return token;
-    }
-    removeAccessToken() {
-        this.cache.remove(ClientCredentialsStrategy.cacheKey);
-    }
-    async getTokenFromApi() {
-        const options = {
-            grant_type: 'client_credentials',
-            scope: this.scopes.join(' ')
-        };
-        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');
-        const hasBuffer = typeof Buffer !== 'undefined';
-        const credentials = `${this.clientId}:${this.clientSecret}`;
-        const basicAuth = hasBuffer
-            ? Buffer.from(credentials).toString('base64')
-            : btoa(credentials);
-        const result = await fetch("https://accounts.spotify.com/api/token", {
-            method: 'POST',
-            headers: {
-                "Content-Type": "application/x-www-form-urlencoded",
-                "Authorization": `Basic ${basicAuth}`
-            },
-            body: bodyAsString
-        });
-        if (result.status !== 200) {
-            throw new Error("Failed to get access token.");
-        }
-        const json = await result.json();
-        return json;
+  clientId;
+  clientSecret;
+  scopes;
+  static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
+  configuration = null;
+  get cache() {
+    return this.configuration.cachingStrategy;
+  }
+  constructor(clientId, clientSecret, scopes = []) {
+    this.clientId = clientId;
+    this.clientSecret = clientSecret;
+    this.scopes = scopes;
+  }
+  setConfiguration(configuration) {
+    this.configuration = configuration;
+  }
+  async getOrCreateAccessToken() {
+    const token = await this.cache.getOrCreate(
+      ClientCredentialsStrategy.cacheKey,
+      async () => {
+        const token = await this.getTokenFromApi();
+        return AccessTokenHelpers.toCachable(token);
+      },
+      async (_) => {
+        const refreshed = await this.getTokenFromApi();
+        return AccessTokenHelpers.toCachable(refreshed);
+      }
+    );
+    return token;
+  }
+  async getAccessToken() {
+    const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
+    return token;
+  }
+  removeAccessToken() {
+    this.cache.remove(ClientCredentialsStrategy.cacheKey);
+  }
+  async getTokenFromApi() {
+    const options = {
+      grant_type: "client_credentials",
+      scope: this.scopes.join(" "),
+    };
+    const bodyAsString = Object.keys(options)
+      .map((key) => key + "=" + options[key])
+      .join("&");
+    const hasBuffer = typeof Buffer !== "undefined";
+    const credentials = `${this.clientId}:${this.clientSecret}`;
+    const basicAuth = hasBuffer
+      ? Buffer.from(credentials).toString("base64")
+      : btoa(credentials);
+    const result = await fetch("https://accounts.spotify.com/api/token", {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Authorization: `Basic ${basicAuth}`,
+      },
+      body: bodyAsString,
+      cache: "no-store",
+    });
+    if (result.status !== 200) {
+      throw new Error("Failed to get access token.");
     }
+    const json = await result.json();
+    return json;
+  }
 }
 //# sourceMappingURL=ClientCredentialsStrategy.js.map
\ No newline at end of file
diff --git a/dist/mjs/index.d.ts b/dist/mjs/index.d.ts
index fbf77964cdd33a0bac5c37ad35e2b1af18d95cd4..310b2f9489b9ee824c13a31a8c8bf8756489f486 100644
--- a/dist/mjs/index.d.ts
+++ b/dist/mjs/index.d.ts
@@ -1,18 +1,33 @@
+import { Scopes } from "./Scopes.js";
 import { SpotifyApi } from "./SpotifyApi.js";
 import AuthorizationCodeWithPKCEStrategy from "./auth/AuthorizationCodeWithPKCEStrategy.js";
 import ClientCredentialsStrategy from "./auth/ClientCredentialsStrategy.js";
-import IAuthStrategy from "./auth/IAuthStrategy.js";
+import IAuthStrategy, { emptyAccessToken } from "./auth/IAuthStrategy.js";
+import ProvidedAccessTokenStrategy from "./auth/ProvidedAccessTokenStrategy.js";
+import GenericCache from "./caching/GenericCache.js";
+import { ICacheStore } from "./caching/ICacheStore.js";
 import InMemoryCachingStrategy from "./caching/InMemoryCachingStrategy.js";
 import LocalStorageCachingStrategy from "./caching/LocalStorageCachingStrategy.js";
-import { ICacheStore } from "./caching/ICacheStore.js";
-import GenericCache from "./caching/GenericCache.js";
 import ConsoleLoggingErrorHandler from "./errorhandling/ConsoleLoggingErrorHandler.js";
 import NoOpErrorHandler from "./errorhandling/NoOpErrorHandler.js";
 import DocumentLocationRedirectionStrategy from "./redirection/DocumentLocationRedirectionStrategy.js";
 import DefaultResponseValidator from "./responsevalidation/DefaultResponseValidator.js";
 import DefaultResponseDeserializer from "./serialization/DefaultResponseDeserializer.js";
-import { Scopes } from "./Scopes.js";
-import { emptyAccessToken } from "./auth/IAuthStrategy.js";
-export { SpotifyApi, AuthorizationCodeWithPKCEStrategy, ClientCredentialsStrategy, InMemoryCachingStrategy, LocalStorageCachingStrategy, GenericCache, ConsoleLoggingErrorHandler, NoOpErrorHandler, DocumentLocationRedirectionStrategy, DefaultResponseValidator, DefaultResponseDeserializer, Scopes, emptyAccessToken };
 export type * from "./types.js";
-export type { IAuthStrategy, ICacheStore, };
+export {
+  AuthorizationCodeWithPKCEStrategy,
+  ClientCredentialsStrategy,
+  ConsoleLoggingErrorHandler,
+  DefaultResponseDeserializer,
+  DefaultResponseValidator,
+  DocumentLocationRedirectionStrategy,
+  GenericCache,
+  InMemoryCachingStrategy,
+  LocalStorageCachingStrategy,
+  NoOpErrorHandler,
+  ProvidedAccessTokenStrategy,
+  Scopes,
+  SpotifyApi,
+  emptyAccessToken,
+};
+export type { IAuthStrategy, ICacheStore };
diff --git a/dist/mjs/index.js b/dist/mjs/index.js
index b850ca13517ccfc7df23ea9655f26075c9d06e92..27ccbfb86bd5c22cc809545751dc59912d36b2c2 100644
--- a/dist/mjs/index.js
+++ b/dist/mjs/index.js
@@ -1,15 +1,31 @@
+import { Scopes } from "./Scopes.js";
 import { SpotifyApi } from "./SpotifyApi.js";
 import AuthorizationCodeWithPKCEStrategy from "./auth/AuthorizationCodeWithPKCEStrategy.js";
 import ClientCredentialsStrategy from "./auth/ClientCredentialsStrategy.js";
+import { emptyAccessToken } from "./auth/IAuthStrategy.js";
+import ProvidedAccessTokenStrategy from "./auth/ProvidedAccessTokenStrategy.js";
+import GenericCache from "./caching/GenericCache.js";
 import InMemoryCachingStrategy from "./caching/InMemoryCachingStrategy.js";
 import LocalStorageCachingStrategy from "./caching/LocalStorageCachingStrategy.js";
-import GenericCache from "./caching/GenericCache.js";
 import ConsoleLoggingErrorHandler from "./errorhandling/ConsoleLoggingErrorHandler.js";
 import NoOpErrorHandler from "./errorhandling/NoOpErrorHandler.js";
 import DocumentLocationRedirectionStrategy from "./redirection/DocumentLocationRedirectionStrategy.js";
 import DefaultResponseValidator from "./responsevalidation/DefaultResponseValidator.js";
 import DefaultResponseDeserializer from "./serialization/DefaultResponseDeserializer.js";
-import { Scopes } from "./Scopes.js";
-import { emptyAccessToken } from "./auth/IAuthStrategy.js";
-export { SpotifyApi, AuthorizationCodeWithPKCEStrategy, ClientCredentialsStrategy, InMemoryCachingStrategy, LocalStorageCachingStrategy, GenericCache, ConsoleLoggingErrorHandler, NoOpErrorHandler, DocumentLocationRedirectionStrategy, DefaultResponseValidator, DefaultResponseDeserializer, Scopes, emptyAccessToken };
+export {
+  AuthorizationCodeWithPKCEStrategy,
+  ClientCredentialsStrategy,
+  ConsoleLoggingErrorHandler,
+  DefaultResponseDeserializer,
+  DefaultResponseValidator,
+  DocumentLocationRedirectionStrategy,
+  GenericCache,
+  InMemoryCachingStrategy,
+  LocalStorageCachingStrategy,
+  NoOpErrorHandler,
+  ProvidedAccessTokenStrategy,
+  Scopes,
+  SpotifyApi,
+  emptyAccessToken,
+};
 //# sourceMappingURL=index.js.map
