diff --git a/dist/cjs/auth/ClientCredentialsStrategy.js b/dist/cjs/auth/ClientCredentialsStrategy.js
index 9d02ee5ffa64673ba96ee34e941da76a2c110a13..039bfe62820feca48049dee97a0265004af0ba18 100644
--- a/dist/cjs/auth/ClientCredentialsStrategy.js
+++ b/dist/cjs/auth/ClientCredentialsStrategy.js
@@ -1,66 +1,79 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
+var __importDefault =
+  (this && this.__importDefault) ||
+  function (mod) {
+    return mod && mod.__esModule ? mod : { default: mod };
+  };
 Object.defineProperty(exports, "__esModule", { value: true });
-const AccessTokenHelpers_js_1 = __importDefault(require("./AccessTokenHelpers.js"));
+const AccessTokenHelpers_js_1 = __importDefault(
+  require("./AccessTokenHelpers.js")
+);
 class ClientCredentialsStrategy {
-    clientId;
-    clientSecret;
-    scopes;
-    static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
-    configuration = null;
-    get cache() { return this.configuration.cachingStrategy; }
-    constructor(clientId, clientSecret, scopes = []) {
-        this.clientId = clientId;
-        this.clientSecret = clientSecret;
-        this.scopes = scopes;
-    }
-    setConfiguration(configuration) {
-        this.configuration = configuration;
-    }
-    async getOrCreateAccessToken() {
-        const token = await this.cache.getOrCreate(ClientCredentialsStrategy.cacheKey, async () => {
-            const token = await this.getTokenFromApi();
-            return AccessTokenHelpers_js_1.default.toCachable(token);
-        }, async (_) => {
-            const refreshed = await this.getTokenFromApi();
-            return AccessTokenHelpers_js_1.default.toCachable(refreshed);
-        });
-        return token;
-    }
-    async getAccessToken() {
-        const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
-        return token;
-    }
-    removeAccessToken() {
-        this.cache.remove(ClientCredentialsStrategy.cacheKey);
-    }
-    async getTokenFromApi() {
-        const options = {
-            grant_type: 'client_credentials',
-            scope: this.scopes.join(' ')
-        };
-        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');
-        const hasBuffer = typeof Buffer !== 'undefined';
-        const credentials = `${this.clientId}:${this.clientSecret}`;
-        const basicAuth = hasBuffer
-            ? Buffer.from(credentials).toString('base64')
-            : btoa(credentials);
-        const result = await fetch("https://accounts.spotify.com/api/token", {
-            method: 'POST',
-            headers: {
-                "Content-Type": "application/x-www-form-urlencoded",
-                "Authorization": `Basic ${basicAuth}`
-            },
-            body: bodyAsString
-        });
-        if (result.status !== 200) {
-            throw new Error("Failed to get access token.");
-        }
-        const json = await result.json();
-        return json;
+  clientId;
+  clientSecret;
+  scopes;
+  static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
+  configuration = null;
+  get cache() {
+    return this.configuration.cachingStrategy;
+  }
+  constructor(clientId, clientSecret, scopes = []) {
+    this.clientId = clientId;
+    this.clientSecret = clientSecret;
+    this.scopes = scopes;
+  }
+  setConfiguration(configuration) {
+    this.configuration = configuration;
+  }
+  async getOrCreateAccessToken() {
+    const token = await this.cache.getOrCreate(
+      ClientCredentialsStrategy.cacheKey,
+      async () => {
+        const token = await this.getTokenFromApi();
+        return AccessTokenHelpers_js_1.default.toCachable(token);
+      },
+      async (_) => {
+        const refreshed = await this.getTokenFromApi();
+        return AccessTokenHelpers_js_1.default.toCachable(refreshed);
+      }
+    );
+    return token;
+  }
+  async getAccessToken() {
+    const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
+    return token;
+  }
+  removeAccessToken() {
+    this.cache.remove(ClientCredentialsStrategy.cacheKey);
+  }
+  async getTokenFromApi() {
+    const options = {
+      grant_type: "client_credentials",
+      scope: this.scopes.join(" "),
+    };
+    const bodyAsString = Object.keys(options)
+      .map((key) => key + "=" + options[key])
+      .join("&");
+    const hasBuffer = typeof Buffer !== "undefined";
+    const credentials = `${this.clientId}:${this.clientSecret}`;
+    const basicAuth = hasBuffer
+      ? Buffer.from(credentials).toString("base64")
+      : btoa(credentials);
+    const result = await fetch("https://accounts.spotify.com/api/token", {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Authorization: `Basic ${basicAuth}`,
+      },
+      body: bodyAsString,
+      cache: "no-store",
+    });
+    if (result.status !== 200) {
+      throw new Error("Failed to get access token.");
     }
+    const json = await result.json();
+    return json;
+  }
 }
 exports.default = ClientCredentialsStrategy;
 //# sourceMappingURL=ClientCredentialsStrategy.js.map
diff --git a/dist/mjs/auth/ClientCredentialsStrategy.js b/dist/mjs/auth/ClientCredentialsStrategy.js
index 26627dd2cd3081f26bbf078259956453dca3233e..fd8c6d026e1ed014efcc590bd2d4b8d118fe7f6e 100644
--- a/dist/mjs/auth/ClientCredentialsStrategy.js
+++ b/dist/mjs/auth/ClientCredentialsStrategy.js
@@ -1,60 +1,69 @@
 import AccessTokenHelpers from "./AccessTokenHelpers.js";
 export default class ClientCredentialsStrategy {
-    clientId;
-    clientSecret;
-    scopes;
-    static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
-    configuration = null;
-    get cache() { return this.configuration.cachingStrategy; }
-    constructor(clientId, clientSecret, scopes = []) {
-        this.clientId = clientId;
-        this.clientSecret = clientSecret;
-        this.scopes = scopes;
-    }
-    setConfiguration(configuration) {
-        this.configuration = configuration;
-    }
-    async getOrCreateAccessToken() {
-        const token = await this.cache.getOrCreate(ClientCredentialsStrategy.cacheKey, async () => {
-            const token = await this.getTokenFromApi();
-            return AccessTokenHelpers.toCachable(token);
-        }, async (_) => {
-            const refreshed = await this.getTokenFromApi();
-            return AccessTokenHelpers.toCachable(refreshed);
-        });
-        return token;
-    }
-    async getAccessToken() {
-        const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
-        return token;
-    }
-    removeAccessToken() {
-        this.cache.remove(ClientCredentialsStrategy.cacheKey);
-    }
-    async getTokenFromApi() {
-        const options = {
-            grant_type: 'client_credentials',
-            scope: this.scopes.join(' ')
-        };
-        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');
-        const hasBuffer = typeof Buffer !== 'undefined';
-        const credentials = `${this.clientId}:${this.clientSecret}`;
-        const basicAuth = hasBuffer
-            ? Buffer.from(credentials).toString('base64')
-            : btoa(credentials);
-        const result = await fetch("https://accounts.spotify.com/api/token", {
-            method: 'POST',
-            headers: {
-                "Content-Type": "application/x-www-form-urlencoded",
-                "Authorization": `Basic ${basicAuth}`
-            },
-            body: bodyAsString
-        });
-        if (result.status !== 200) {
-            throw new Error("Failed to get access token.");
-        }
-        const json = await result.json();
-        return json;
+  clientId;
+  clientSecret;
+  scopes;
+  static cacheKey = "spotify-sdk:ClientCredentialsStrategy:token";
+  configuration = null;
+  get cache() {
+    return this.configuration.cachingStrategy;
+  }
+  constructor(clientId, clientSecret, scopes = []) {
+    this.clientId = clientId;
+    this.clientSecret = clientSecret;
+    this.scopes = scopes;
+  }
+  setConfiguration(configuration) {
+    this.configuration = configuration;
+  }
+  async getOrCreateAccessToken() {
+    const token = await this.cache.getOrCreate(
+      ClientCredentialsStrategy.cacheKey,
+      async () => {
+        const token = await this.getTokenFromApi();
+        return AccessTokenHelpers.toCachable(token);
+      },
+      async (_) => {
+        const refreshed = await this.getTokenFromApi();
+        return AccessTokenHelpers.toCachable(refreshed);
+      }
+    );
+    return token;
+  }
+  async getAccessToken() {
+    const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);
+    return token;
+  }
+  removeAccessToken() {
+    this.cache.remove(ClientCredentialsStrategy.cacheKey);
+  }
+  async getTokenFromApi() {
+    const options = {
+      grant_type: "client_credentials",
+      scope: this.scopes.join(" "),
+    };
+    const bodyAsString = Object.keys(options)
+      .map((key) => key + "=" + options[key])
+      .join("&");
+    const hasBuffer = typeof Buffer !== "undefined";
+    const credentials = `${this.clientId}:${this.clientSecret}`;
+    const basicAuth = hasBuffer
+      ? Buffer.from(credentials).toString("base64")
+      : btoa(credentials);
+    const result = await fetch("https://accounts.spotify.com/api/token", {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/x-www-form-urlencoded",
+        Authorization: `Basic ${basicAuth}`,
+      },
+      body: bodyAsString,
+      cache: "no-store",
+    });
+    if (result.status !== 200) {
+      throw new Error("Failed to get access token.");
     }
+    const json = await result.json();
+    return json;
+  }
 }
 //# sourceMappingURL=ClientCredentialsStrategy.js.map
