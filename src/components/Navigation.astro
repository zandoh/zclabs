---
import { DarkMode } from "accessible-astro-components";
---

<div id="main-navigation" class="is-desktop py-8">
  <div class="container">
    <a href="/" class="flex items-center gap-2 !no-underline">
      <svg width="70px" height="auto" version="1.1" viewBox="0 0 700 500" xmlns="http://www.w3.org/2000/svg">
        <g height="100%" width="100%">
          <path
            d="m489.5 183.19c-1.1445 0-2.2578 0.015625-3.3672 0.050781-9.1562-36.133-34.328-66.098-68.336-81.355-34.008-15.258-73.125-14.133-106.2 3.0508s-56.484 48.543-63.555 85.141c-29.52-11.145-62.461-8.6055-89.926 6.9258-27.461 15.531-46.613 42.457-52.273 73.496-5.6602 31.039 2.75 62.988 22.965 87.215 20.211 24.23 50.137 38.23 81.688 38.227h9.375c4.832 0 8.75-3.918 8.75-8.75s-3.918-8.75-8.75-8.75h-9.375c-27.273 0.050781-53.062-12.422-69.949-33.836-16.891-21.414-23.016-49.398-16.609-75.91 6.4062-26.512 24.625-48.613 49.43-59.957 24.805-11.34 53.441-10.668 77.684 1.8281 2.5859 1.3477 5.6758 1.3164 8.2383-0.085938 2.5586-1.3984 4.2539-3.9805 4.5195-6.8867 3.1133-33.777 22.434-63.941 51.812-80.902 29.375-16.957 65.16-18.602 95.969-4.4102 30.809 14.195 52.812 42.461 59.012 75.812 0.88672 4.4766 5.0273 7.5547 9.5703 7.1094 3.0977-0.34766 6.2148-0.51953 9.332-0.51562 31.723 0.046875 61.016 16.996 76.863 44.477 15.852 27.48 15.852 61.324 0 88.805-15.848 27.477-45.141 44.426-76.863 44.473h-12.75c-4.832 0-8.75 3.918-8.75 8.75s3.918 8.75 8.75 8.75h12.75c37.973-0.050781 73.039-20.336 92.012-53.227 18.973-32.895 18.973-73.406 0-106.3-18.973-32.895-54.039-53.18-92.012-53.23z"
          ></path>
          <path
            d="m401.7 300.05c-1.6406-1.668-3.8828-2.6094-6.2227-2.6133-2.3438-0.003906-4.5898 0.93359-6.2344 2.5977-1.6484 1.6641-2.5586 3.918-2.5273 6.2617 0.027343 2.3398 0.99609 4.5703 2.6797 6.1953l40.281 39.871-40.281 39.871c-1.6836 1.6211-2.6523 3.8555-2.6797 6.1953-0.03125 2.3398 0.88281 4.5977 2.5273 6.2617 1.6484 1.6641 3.8906 2.6016 6.2344 2.5977 2.3398-0.003906 4.582-0.94531 6.2227-2.6133l46.57-46.09v-0.003906c1.6641-1.6406 2.5977-3.8828 2.5977-6.2188s-0.93359-4.5781-2.5977-6.2227z"
          ></path>
          <path
            d="m310.68 300.12c-1.6328-1.6523-3.8516-2.5859-6.1719-2.5977-2.3203-0.015625-4.5508 0.89453-6.1992 2.5273l-46.57 46.09c-1.6641 1.6445-2.5977 3.8867-2.5977 6.2227s0.93359 4.5781 2.5977 6.2188l46.57 46.09v0.003906c1.6406 1.668 3.8828 2.6094 6.2266 2.6133 2.3398 0.003906 4.5859-0.93359 6.2305-2.5977 1.6484-1.6641 2.5586-3.9219 2.5273-6.2617-0.027343-2.3398-0.99219-4.5742-2.6797-6.1953l-40.281-39.871 40.281-39.871c1.6484-1.6328 2.582-3.8516 2.5977-6.1719 0.011719-2.3203-0.89844-4.5508-2.5312-6.1992z"
          ></path>
          <path
            d="m381.09 272.21c-4.5391-1.6406-9.5547 0.67578-11.246 5.1953l-50.773 138.05c-1.6641 4.5391 0.65625 9.5703 5.1875 11.246 0.96875 0.35156 1.9922 0.53125 3.0234 0.53125 3.668 0 6.9453-2.2852 8.2148-5.7266l50.789-138.05c1.6602-4.5391-0.66406-9.5664-5.1953-11.246z"
          ></path>
        </g>
      </svg>
      <span class="font-bold">zclabs</span>
    </a>
    <div class="wrapper">
      <nav class="desktop-menu" aria-label="Main navigation desktop">
        <ul class="menu">
          <slot />
        </ul>
      </nav>
      <DarkMode />
    </div>
    <nav class="mobile-menu" aria-label="Main navigation mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  const mainNav = document.querySelector("#main-navigation");
  const mainMenu = mainNav.querySelector("ul");
  const dropdownMenus = [...document.querySelectorAll(".has-dropdown button")];

  const setActiveMenuItem = () => {
    const mobileDesktopMenus = mainNav.querySelectorAll("nav > ul");
    const currenPathname = window.location.pathname;

    mobileDesktopMenus.forEach((menu) => {
      const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[];

      menuItems.forEach((menuItem) => {
        if (currenPathname.includes(menuItem.pathname.replaceAll("/", "")) && menuItem.textContent !== "Home") {
          menuItem.classList.add("is-active");
          menuItem.setAttribute("aria-current", "page");
        } else if (menuItem.textContent === "Home" && currenPathname === "/") {
          menuItem.classList.add("is-active");
          menuItem.setAttribute("aria-current", "page");
        }
      });
    });
  };

  const checkMenuSize = () => {
    const mainNavWidth = mainNav.getBoundingClientRect().width;
    const desktopMenuWidth = document.querySelector(".desktop-menu").getBoundingClientRect().width;
    const logoWidthBuffer = 300;
    const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer;

    if (totalMenuWidth >= mainNavWidth) {
      mainNav.classList.remove("is-desktop");
      mainNav.classList.add("is-mobile");
    } else if (totalMenuWidth <= mainNavWidth) {
      mainNav.classList.add("is-desktop");
      mainNav.classList.remove("is-mobile");
    }
  };

  const isOutOfViewport = (element) => {
    const elementBounds = element.getBoundingClientRect();
    return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth);
  };

  const openDropdownMenu = (dropdownMenu) => {
    const dropdownList = dropdownMenu.parentNode.querySelector("ul");

    dropdownMenu.classList.add("show");
    dropdownMenu.setAttribute("aria-expanded", "true");

    if (isOutOfViewport(dropdownList)) {
      dropdownList.style.left = "auto";
    }
  };

  const closeDropdownMenu = (dropdownMenu) => {
    dropdownMenu.classList.remove("show");
    dropdownMenu.setAttribute("aria-expanded", "false");
  };

  const closeAllDropdownMenus = () => {
    for (let i = 0; i < dropdownMenus.length; i++) {
      closeDropdownMenu(dropdownMenus[i]);
    }
  };

  const toggleDropdownMenu = (event) => {
    if (event.target.getAttribute("aria-expanded") === "false") {
      closeAllDropdownMenus();
      openDropdownMenu(event.target);
    } else {
      closeDropdownMenu(event.target);
    }
  };

  mainMenu &&
    mainMenu.addEventListener("keydown", (event) => {
      const element = event.target as Element;
      const currentMenuItem = element.closest("li");
      const menuItems = [...mainMenu.querySelectorAll(".menu-item")];
      const currentDropdownMenu = element.closest(".has-dropdown button");
      const currentDropdownMenuItem = element.closest(".has-dropdown li");
      const currentIndex = menuItems.findIndex((item) => item === currentMenuItem);

      const key = event.key;
      let targetItem;

      if (key === "ArrowRight") {
        if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
          targetItem = menuItems[0];
        } else {
          targetItem = menuItems[currentIndex + 1];
        }
      }

      if (key === "ArrowLeft") {
        if (menuItems.indexOf(currentMenuItem) === 0) {
          targetItem = menuItems[menuItems.length - 1];
        } else {
          targetItem = menuItems[currentIndex - 1];
        }
      }

      if (key === "Escape") {
        targetItem = menuItems[0];
      }

      if (currentDropdownMenu) {
        const firstDropdownItem = currentDropdownMenu.nextElementSibling.querySelector("li");

        if (key === "ArrowDown") {
          event.preventDefault();
          openDropdownMenu(currentDropdownMenu);
          targetItem = firstDropdownItem;
        }

        if (key === "Escape") {
          closeDropdownMenu(currentDropdownMenu);
        }
      }

      if (currentDropdownMenuItem) {
        const currentDropdownList = currentDropdownMenuItem.parentNode;
        const dropdownMenuItems = [...currentDropdownList.querySelectorAll("li")];
        const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem);

        if (key === "ArrowDown") {
          event.preventDefault();

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
            targetItem = dropdownMenuItems[0];
          } else {
            targetItem = dropdownMenuItems[currentIndex + 1];
          }
        }

        if (key === "ArrowUp") {
          event.preventDefault();

          if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === 0) {
            targetItem = dropdownMenuItems[dropdownMenuItems.length - 1];
          } else {
            targetItem = dropdownMenuItems[currentIndex - 1];
          }
        }

        if (key === "Escape") {
          const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling;
          targetItem = currentDropdownMenu.parentNode;
          closeAllDropdownMenus();
        }
      }

      if (targetItem) {
        targetItem.querySelector("a, button, input").focus();
      }
    });

  dropdownMenus &&
    dropdownMenus.forEach((dropdownMenu) => {
      dropdownMenu.addEventListener("click", toggleDropdownMenu);
    });

  setActiveMenuItem();
  checkMenuSize();

  window.addEventListener("resize", checkMenuSize);
  window.addEventListener("click", (event) => {
    const element = event.target as Element;
    if (!element.hasAttribute("aria-haspopup") && !element.classList.contains("submenu-item")) {
      closeAllDropdownMenus();
    }
  });
</script>

<style lang="scss" is:global>
  @use "../assets/scss/base/breakpoint" as *;
  @use "../assets/scss/base/outline" as *;

  #main-navigation {
    > .container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }

    &.is-desktop {
      .desktop-menu {
        visibility: visible;
        position: static;
      }

      .mobile-menu {
        display: none;
      }

      .darkmode-toggle {
        margin-top: -6px;
      }
    }

    &.is-mobile {
      flex-direction: column;

      .mobile-menu {
        display: none;

        &.show {
          display: block;
        }
      }

      .desktop-menu {
        visibility: hidden;
        z-index: -99;
        position: absolute;
        left: 0;
      }

      .responsive-toggle {
        display: block;
      }
    }

    .wrapper {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    nav {
      > ul {
        display: flex;
        gap: 1.5rem;
        list-style-type: none;

        a,
        button {
          text-decoration: none;
          font-size: 1.125rem;
          line-height: 1.6875rem;
          transition: color 0.15s ease-in-out;
        }

        a:hover,
        a:focus,
        .is-active,
        .has-dropdown > button:hover,
        .has-dropdown > button:focus {
          text-decoration: underline;
          text-decoration-thickness: 1px;
          text-decoration-style: wavy;
          text-underline-offset: 7px;
        }

        .is-active {
          font-weight: bold;
        }
      }
    }

    .mobile-menu {
      flex-basis: 100%;
      padding: 2rem 0;

      > ul {
        flex-direction: column;

        ul {
          position: relative;
          margin-top: 1rem;
        }
      }

      a,
      button {
        display: block;
        width: 100%;
        padding: 0.5rem 0;
      }
    }

    .has-dropdown {
      position: relative;

      > button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0;
        margin-top: -1px;
        border: none;
        color: var(--action-color);

        &:hover {
          color: var(--action-color-state);

          &::after {
            border-color: var(--action-color-state);
          }
        }

        &::after {
          content: "";
          width: 0.85rem;
          height: 0.75em;
          margin-top: -0.25rem;
          border-style: solid;
          border-width: 0.2em 0.2em 0 0;
          border-color: var(--action-color);
          transform: rotate(135deg);
        }

        &.show {
          &::after {
            margin-top: 0.25rem;
            transform: rotate(-45deg);
          }

          ~ ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }
        }
      }

      ul {
        display: none;
        position: absolute;
        z-index: 100;
        min-width: 260px;
        top: 125%;
        right: 0;
        bottom: auto;
        left: 0;
        padding: 1rem;
        background-color: var(--neutral-background);
        border: 2px solid black;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
      }
    }
  }

  .darkmode-toggle {
    padding: 0;
    border: none;

    svg {
      width: 30px;
      margin-top: 4px;
    }

    svg path {
      fill: var(--action-color);
      transition: fill 0.2s ease-in-out;
    }

    &:hover {
      svg path {
        fill: var(--action-color-state);
      }
    }

    &:focus {
      @include outline;

      &:not(:focus-visible) {
        outline: none;
        box-shadow: none;
      }
    }
  }
</style>
